{
  "name": "Kasia",
  "tagline": ":tophat: A React Redux toolset for the WordPress API",
  "body": "<p align=\"center\">\r\n    <img src=\"https://raw.githubusercontent.com/outlandishideas/kasia/master/assets/tophat.png\" />\r\n</p>\r\n\r\n<p><h1 align=\"center\">kasia</h1></p>\r\n\r\n<p align=\"center\">A React Redux toolset for the WordPress API</p>\r\n\r\n<p align=\"center\">Made with ‚ù§ at <a href=\"http://www.twitter.com/outlandish\">@outlandish</a></p>\r\n\r\n<p align=\"center\">\r\n    <a href=\"http://badge.fury.io/js/kasia\"><img alt=\"npm version\" src=\"https://badge.fury.io/js/kasia.svg\" /></a>\r\n    <a href=\"http://standardjs.com/\"><img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg\" /></a>\r\n    <a href=\"https://travis-ci.org/outlandishideas/kasia\"><img alt=\"travis ci build\" src=\"https://travis-ci.org/outlandishideas/kasia.svg\" /></a>\r\n    <a href=\"https://coveralls.io/repos/github/outlandishideas/kasia/badge.svg?branch=master\"><img alt=\"coverage\" src=\"https://coveralls.io/repos/github/outlandishideas/kasia/badge.svg?branch=master\" /></a>\r\n</p>\r\n\r\n<hr/>\r\n\r\nGet data from WordPress and into components with ease...\r\n\r\n```js\r\n// e.g. Get a Post by its slug\r\n@connectWpPost(Post, 'spongebob-squarepants')\r\nfunction SpongebobSquarepants (props) {\r\n  const { post: spongebob } = props.kasia\r\n\r\n  return spongebob\r\n    ? <h1>{spongebob.title}</h1> //=> Spongebob Squarepants\r\n    : <span>Loading...</span>\r\n}\r\n```\r\n\r\n## Features\r\n\r\n- Declaratively connect React components to data from WordPress.\r\n- Uses [`node-wpapi`](https://github.com/WP-API/node-wpapi) internally in order to facilitate complex queries.\r\n- Register and consume Custom Content Types with ease.\r\n- All WP data is normalised at `store.wordpress`, e.g. `store.wordpress.pages`.\r\n- Support for universal applications.\r\n- Support for plugins, e.g. [`wp-api-menus`](https://github.com/outlandishideas/kasia-plugin-wp-api-menus).\r\n\r\nCheck out the [Kasia boilerplate](https://github.com/outlandishideas/kasia-boilerplate)!\r\n\r\n## Glossary\r\n\r\n- [Notice](#notice)\r\n- [Requirements](#requirements)\r\n- [Install](#install)\r\n- [Import](#import)\r\n- [__Configure__](#configure)\r\n- [__Usage__](#usage)\r\n- [Exports](#exports)\r\n- [The Shape of Things](#the-shape-of-things)\r\n- [Plugins](#plugins)\r\n- [Universal Applications](#universal-applications)\r\n- [Author & License](#author-&-license)\r\n\r\n## Requirements\r\n\r\nKasia suits applications that are built using these technologies:\r\n\r\n- React\r\n- Redux\r\n- Redux Sagas (>= 0.10.0)\r\n- WordPress\r\n- [WP-API plugin](http://v2.wp-api.org/)\r\n- [`node-wpapi`](https://github.com/WP-API/node-wpapi)\r\n\r\n## Install\r\n\r\n`npm install kasia --save`\r\n\r\n## Import\r\n\r\n```js\r\n// ES2015\r\nimport Kasia from 'kasia'\r\n```\r\n\r\n```js\r\n// CommonJS\r\nvar Kasia = require('kasia')\r\n```\r\n\r\n## Configure\r\n\r\nConfigure Kasia in three steps:\r\n\r\n1. Initialise Kasia with an instance of `node-wpapi`.\r\n\r\n2. Spread the Kasia reducer when creating the redux root reducer.\r\n\r\n3. Run the Kasia sagas after creating the redux-saga middleware.\r\n\r\nA slimline example...\r\n\r\n```js\r\nimport { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport Kasia from 'kasia'\r\nimport wpapi from 'wpapi'\r\n\r\nconst WP = new wpapi({ endpoint: 'http://wordpress/wp-json' })\r\n\r\nconst { kasiaReducer, kasiaSagas } = Kasia({ WP })\r\n\r\nconst rootSaga = function * () {\r\n  yield [...kasiaSagas]\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  ...kasiaReducer\r\n})\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport default function configureStore (initialState) {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(sagaMiddleware)\r\n  )\r\n  \r\n  sagaMiddleware.run(rootSaga)\r\n\r\n  return store\r\n}\r\n```\r\n\r\n## Usage\r\n\r\nThings to keep in mind:\r\n\r\n- A component will make a request for data 1) when it mounts and 2) if its props change. For `connectWpPost` a change\r\nin props will trigger Kasia to try and find entity data for the new identifier in the store. If it is found, no request\r\nis made.\r\n- Content data should be parsed before being rendered as it may contain encoded HTML entities.\r\n- In arbitrary queries with `connectWpQuery`, we suggest that you always call the `embed` method on the\r\nquery chain, otherwise embedded content data will be omitted from the response.\r\n- Paging data for the request made on behalf of the component is available at `this.props.kasia.query.paging`.\r\n- The examples given assume the use of [decorators.](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy)\r\nHowever decorator support is not necessary. See the end of each example for the alternative Higher Order Component approach.\r\n\r\n### `@connectWpPost(contentType, identifier) : Component`\r\n\r\nConnect a component to a single entity in WordPress, e.g. Post, Page, or custom content type. \r\n\r\n- __contentType__ {String} The content type to fetch\r\n- __identifier__ {String|Number|Function} ID of the entity to fetch or function that derives it from `props`\r\n\r\nReturns a connected component.\r\n\r\nExample, using identifier derived from route parameter on `props`:\r\n\r\n```js\r\nimport React, { Component } from 'react'\r\nimport { Route } from 'react-router'\r\nimport { connectWpPost } from 'kasia/connect'\r\nimport { Page } from 'kasia/types'\r\n\r\n@connectWpPost(Page, (props) => props.params.slug)\r\nexport default class Page extends Component {\r\n  render () {\r\n    const { query, page } = this.props.kasia\r\n\r\n    if (!query.complete) {\r\n      return <span>Loading...</span>\r\n    }\r\n\r\n    return <h1>{page.title}</h1>\r\n  }\r\n}\r\n\r\n// Without decorator support\r\nexport default connectWpPost(Page, (props) => props.params.slug)(Post)\r\n```\r\n\r\n### `@connectWpQuery(queryFn[, propsComparatorFn, options]) : Component`\r\n\r\nConnect a component to the result of an arbitrary WP-API query.\r\n\r\n- __queryFn__ {Function} Function that accepts args `wpapi`, `props`, `state` and should return a WP-API query\r\n- __propsComparatorFn__ {Function} _(optional)_ Function that determines if new data should be requested by inspecting props\r\n- [__options.displayName__] {String} _(optional)_ Display name of the component, useful if component is wrapped by other\r\n                                                  decorators which will disguise the actual `displayName`. Important if\r\n                                                  the component is used with prepared queries (server-side rendering).\r\n\r\nReturns a connected component.\r\n\r\nBy default the component will request new data via the given `queryFn` if the `propsComparatorFn` returns true.\r\nThe default property comparison behaviour is to diff primitive values on the props objects.\r\n\r\nEntities returned from the query will be placed on `this.props.kasia.entities` under the same\r\nnormalised structure as described in [The Shape of Things](#the-shape-of-things).\r\n\r\nExample, fetching the most recent \"News\" entities:\r\n\r\n```js\r\nimport React, { Component } from 'react'\r\nimport { Route } from 'react-router'\r\nimport { connectWpPost } from 'kasia/connect'\r\n\r\n// Note the invocation of `embed` in the query chain\r\n@connectWpQuery((wpapi, props) => {\r\n  return wpapi.news().month(props.month).embed().get()\r\n})\r\nexport default class RecentNews extends Component {\r\n  render () {\r\n    const {\r\n      query,\r\n      entities: { news }\r\n    } = this.props.kasia\r\n\r\n    if (!query.complete) {\r\n      return <span>Loading...</span>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Recent News Headlines</h1>\r\n        {Object.keys(news).map((key) =>\r\n          <h2>{news[key].title}</h2>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// Without decorator support\r\nexport default connectWpQuery((wpapi) => {\r\n  return wpapi.news().embed().get()\r\n})(Post)\r\n```\r\n\r\n### `Kasia(options) : Object`\r\n\r\nConfigure Kasia.\r\n\r\n- __options__ {Object} Options object\r\n\r\nReturns an object containing the Kasia reducer and sagas.\r\n\r\n```js\r\nconst { kasiaReducer, kasiaSagas } = Kasia({\r\n  WP: new wpapi({ endpoint: 'http://wordpress/wp-json' })\r\n})\r\n```\r\n\r\nThe `options` object accepts:\r\n\r\n- `WP` {wpapi}\r\n\r\n    An instance of `node-wpapi`.\r\n\r\n- `keyEntitiesBy` {String} _(optional)_ (default `'id'`)\r\n\r\n    Property of entities used to key them in the store\r\n\r\n- `contentTypes` {Array} _(optional)_\r\n\r\n    Array of custom content type definitions\r\n\r\n    ```js\r\n    // Example custom content type definition\r\n    contentTypes: [{\r\n      name: 'book',\r\n      plural: 'books',\r\n      slug: 'books',\r\n      route, // optional, default=\"/{plural}/(?P<id>)\"\r\n      namespace, // optional, default=\"wp/v2\"\r\n      methodName // optional, default={plural}\r\n    }]\r\n    ```\r\n\r\n- `plugins` {Array} _(optional)_\r\n\r\n    Array of Kasia plugins.\r\n\r\n    ```js\r\n    import KasiaWpApiMenusPlugin from 'kasia-plugin-wp-api-menus'\r\n\r\n    // Example passing in plugin\r\n    plugins: [\r\n        [KasiaWpApiMenusPlugin, { route: 'menus' }], // with configuration\r\n        KasiaWpApiMenusPlugin, // without configuration\r\n    ]\r\n    ```\r\n\r\n## Exports\r\n\r\n### `kasia`\r\n\r\nThe Kasia configurator.\r\n\r\n```js\r\nimport Kasia from 'kasia'\r\n```\r\n\r\n### `kasia/connect`\r\n\r\nThe connect decorators.\r\n\r\n```js\r\nimport { connectWpPost, connectWpQuery } from 'kasia/connect'\r\n```\r\n\r\n### `kasia/types`\r\n\r\nThe built-in WordPress content types that can be passed to `connectWpPost` to define what content type\r\na request should be made for.\r\n\r\n```js\r\nimport {\r\n  Category, Comment, Media, Page,\r\n  Post, PostStatus, PostType,\r\n  PostRevision, Tag, Taxonomy, User\r\n} from 'kasia/types'\r\n```\r\n\r\n### `kasia/util`\r\n\r\nUtility methods to help you when building your application.\r\n\r\n```js\r\nimport { \r\n  makePreloaderSaga, \r\n  makeQueryPreloaderSaga,\r\n  makePostPreloaderSaga\r\n} from 'kasia/util'\r\n```\r\n\r\n## The Shape of Things\r\n\r\nKasia restructures the [shape of things](https://www.youtube.com/watch?v=Zn2JFlteeJ0) returned from the WP-API.\r\n\r\nThe changes made to the data are all effects available in the\r\n[`wp-api-response-modify`](https://github.com/outlandishideas/wp-api-response-modify) library.\r\n\r\n### Why?\r\n\r\nThe JSON returned from WP-API contains such things as objects with a single property (e.g. objects with `rendered`), \r\nmeta data property names prefixed with an underscore (e.g. `_links`), and\r\n\r\n### What changes should I be aware of?\r\n\r\n- Queries initiated by `connectWpPost` will always request embedded data.\r\n\r\n    The primary reason for this is to reduce the number of requests made to the WP-API as it is very common\r\n    to not only want content data, but also any metadata such as authors.\r\n\r\n- All property names are camel-cased.\r\n\r\n    ```js\r\n    \"featured_media\" => \"featuredMedia\"\r\n    ```\r\n\r\n- Links are removed.\r\n\r\n    ```js\r\n    { title: 'Wow what an amazing title!', _links: {}, ... }\r\n    // becomes...\r\n    { title: 'Wow what an amazing  title!', ... }\r\n    ```\r\n\r\n- Objects that have a single property `'rendered'` are flattened.\r\n\r\n    ```js\r\n    { content: { rendered: '<h1>Hello, World!</h1>' }, ... }\r\n    // becomes...\r\n    { content: '<h1>Hello, World!</h1>', ... }\r\n    ```\r\n\r\n- Content types are normalised using [`normalizr`](https://github.com/paularmstrong/normalizr).\r\nThis means that any embedded content data is made available on the store within its respective content type collection.\r\nFor example:\r\n\r\n    ```js\r\n    {\r\n      posts: {},\r\n      users: {},\r\n      pages: {},\r\n      news: {}, // custom content type\r\n      ...\r\n    }\r\n    ```\r\n\r\n## Plugins\r\n\r\nKasia exposes a simple API for third-party plugins.\r\n\r\nA plugin should:\r\n\r\n- be a function that accepts these arguments:\r\n    - __WP__ {wpapi} An instance of `wpapi`\r\n    - __pluginOptions__ {Object} The user's options for the plugin\r\n    - __kasiaOptions__ {Object} The user's options for Kasia\r\n\r\n- return an object containing `reducers` (Object) and `sagas` (Array).\r\n\r\n- use the `'kasia/'` action type prefix.\r\n\r\n```js\r\n// Example definition returned by a plugin\r\n{\r\n  reducer: {\r\n    'kasia/SET_DATA': function setDataReducer () {}\r\n    'kasia/REMOVE_DATA': function removeDataReducer () {}\r\n  },\r\n  sagas: [function * fetchDataSaga () {}]\r\n}\r\n```\r\n\r\n### Available plugins:\r\n\r\n- [`kasia-plugin-wp-api-menus`](https://github.com/outlandishideas/kasia-plugin-wp-api-menus)\r\n- [`kasia-plugin-wp-api-all-terms`](https://github.com/outlandishideas/kasia-plugin-wp-api-all-terms)\r\n\r\n## Universal Applications\r\n\r\n### Utilities\r\n\r\n#### `util/makePreloaderSaga(components, renderProps) : Generator`\r\n\r\nCreate a single saga operation that will preload all data for any Kasia components in `components`.\r\n\r\n- __components__ {Array} Array of components\r\n- __renderProps__ {Object} Render props object derived from the matched route\r\n\r\nReturns a saga operation.\r\n\r\n#### `util/makeQueryPreloaderSaga(queryFn, renderProps) : Generator`\r\n\r\nCreate a single saga operation that will preload data for an arbitrary query against the WP API.\r\n\r\n- __queryFn__ {Function} Query function that accepts `wpapi` as argument\r\n- __renderProps__ {Object} Render props object\r\n\r\nReturns a saga operation.\r\n\r\n#### `util/makePostPreloaderSaga(contentType, id[, state]) : Generator`\r\n\r\nCreate a single saga operation that will preload data for a single post from the WP API.\r\n\r\n- __contentType__ {String} The content type of the item to fetch\r\n- __id__ {String|Number|Function} ID of the post or a function to derive from `renderProps`\r\n- __renderProps__ {Object} Render props object\r\n- [__state__] {Object} _(optional)_ State object (default: `null`)\r\n\r\nReturns a saga operation.\r\n\r\n#### `ConnectedComponent.makePreloader(renderProps[, state]) : Array<Array>`\r\n\r\nConnected components expose a static method `makePreloader` that produces an array of saga operations\r\nto facilitate the request for entity data on the server (\"preloaders\").\r\n\r\nCreate an array of preloader operations.\r\n\r\n- __renderProps__ {Object} Render props object derived from the matched route \r\n- [__state__] {Object} _(optional)_ State object (default: `null`) \r\n\r\nReturns an array of saga operations in the form:\r\n\r\n```js\r\n// Saga operations\r\n[ [sagaGeneratorFn, action] ]\r\n```\r\n\r\nElements:\r\n\r\n- `sagaGenerator` {Function} Must be called with the `action`\r\n\r\n- `action` {Object} An action object containing information for the saga to fetch data\r\n\r\n### Example\r\n\r\nA somewhat contrived example using the available `kasia/util` methods (see below).\r\n\r\n```js\r\nimport { match } from 'react-router'\r\n\r\nimport { \r\n  makePreloaderSaga,\r\n  makeQueryPreloaderSaga\r\n} from 'kasia/util'\r\n\r\n// Our application's react-router routes\r\nimport routes from './routes'\r\n\r\n// Configures the redux store with saga middleware\r\n// and enhances it with the `runSaga` method\r\nimport store from './store'\r\n\r\n// Takes the components and render props from matched route, and\r\n// the store state and produces the complete HTML as a string\r\nimport renderToString from './render'\r\n\r\n// Collection of query functions that request data via `wpapi`\r\nimport { categoriesQuery } from './queries'\r\n\r\n// Run all `sagas` until their completion\r\nfunction runSagas (store, sagas) {\r\n  return sagas.reduce((promise, saga) => {\r\n    return promise.then(() => store.runSaga(saga).done)\r\n  }, Promise.resolve())\r\n}\r\n\r\n// Produce a static webpage and send to the client for the given `route`\r\nexport function preload (res, route) { \r\n  return match({ routes, location: route })\r\n    .then((error, redirectLocation, renderProps) => {\r\n      if (error) {\r\n        res.sendStatus(500)\r\n        return\r\n      }\r\n        \r\n      if (redirectLocation) {\r\n        res.redirect(302, redirectLocation.pathname + redirectLocation.search)\r\n        return\r\n      }\r\n\r\n      const preloaders = [\r\n        makeQueryPreloaderSaga(categoriesQuery, renderProps),\r\n        makePreloaderSaga(renderProps.components, renderProps)\r\n      ]\r\n\r\n      return runSagas(preloaders)\r\n        .then(() => renderToString(components, renderProps, store.getState()))\r\n        .then((document) => res.send(document))\r\n    })\r\n}\r\n```\r\n\r\n## Contributing\r\n\r\nAll pull requests and issues welcome! \r\n\r\n- When submitting an issue please provide adequate steps to reproduce the problem.\r\n- PRs must be made using the `standard` code style.\r\n- PRs must update the version of the library according to [semantic versioning](http://semver.org/).\r\n\r\nIf you're not sure how to contribute, check out Kent C. Dodds'\r\n[great video tutorials on egghead.io](https://egghead.io/lessons/javascript-identifying-how-to-contribute-to-an-open-source-project-on-github)!\r\n\r\n## Author & License\r\n\r\n`kasia` was created by [Outlandish](https://twitter.com/outlandish) and is released under the MIT license.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}